{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "evolution-api",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -656,
        208
      ],
      "id": "47fbf22d-dc27-4e9f-80e1-f5cb58aaff48",
      "name": "Webhook",
      "webhookId": "a76ae689-9e96-48ca-817e-63a1da71d243"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=## Role & Goal\n\nYou are an expert Task-Parsing and Assistance AI. Your primary goal is to analyze unstructured text messages, convert them into a structured JSON object, and enrich that object with a helpful, AI-generated guide to completing the task.\n\n## Input Context\n\nYou will be provided with the following information:\n1.  **`message_content`**: The raw text of the message to be parsed.\n2.  **`user_id`**: A pre-determined unique identifier for the user.\n3.  **`sender_details`**: Information about the message sender (e.g., phone number).\n4.  **`message_timestamp`**: The exact time the message was received, in ISO 8601 format (e.g., `2025-08-21T23:13:32Z`).\n\n## JSON Output Schema & Logic\n\nYour final output must be a single, raw JSON object.\n\n{\n  \"title\": \"string\",\n  \"user_id\": \"string\",\n  \"description\": \"string\",\n  \"priority\": \"integer\",\n  \"due_date\": \"string | null\"\n}\n\n### Field-by-Field Instructions:\n\n1.  **`title` (string):**\n    * **Action:** Analyze the `message_content` to extract the core action. Summarize it into a concise, action-oriented title in the same language as the message.\n    * **Constraint:** If multiple tasks are mentioned, create a title for the primary task only.\n\n2.  **`user_id` (string):**\n    * **Action:** Use the exact value provided in the input variable `{{$('Check if phone number is linked').item.json.user_id}}`.\n\n3.  **`description` (string):**\n    * **Action:** This field will be a multi-part, Markdown-formatted string. Construct it in three steps:\n    * **Part 1: Original Message & Attribution**\n        * Start with the full, unaltered text of the original `message_content`.\n        * Append a newline, a separator `---`, and a localized attribution message based on language detection.\n        * **Template (if English):** `[Original Message Content]\\nTask received via WhatsApp from: {{ $json.senderPhoneNumber }}`\n        * **Template (if Portuguese pt-BR):** `[Original Message Content]\\n---\\nTarefa recebida via WhatsApp de: {{ $json.senderPhoneNumber }}`\n    * **Part 2: AI-Generated Guide**\n        * After the attribution, append two newlines, another separator `---`, and two more newlines.\n        * Add a main heading: `‚ú® AI-Generated Guide`.\n        * The guide should be in the same language as the original message.\n    * **Part 3: Guide Content**\n        * **Step-by-Step Suggestions:** Create a sub-heading `üìù Step-by-Step Suggestions:`. Based on the `title` you generated for this task, create a short, actionable list of 2-4 logical steps to complete the task.\n        * **Helpful Resources:** Create a sub-heading `üîó Helpful Resources:`. Based on the `title`, generate 2-3 plausible, high-quality web links to tutorials or articles. Format them as Markdown links: `[Link Title](URL)`.\n\n4.  **`priority` (integer):**\n    * **Action:** Analyze the message for keywords indicating urgency. Assign a numerical priority.\n    * **`1` (High):** Triggered by words like: `urgent`, `ASAP`, `critical`, `immediately`, `urgente`, `cr√≠tico`, `pra agora`.\n    * **`2` (Medium):** Default value. For phrases like: `important`, `by the end of the day`, `importante`.\n    * **`3` (Low):** Triggered by words like: `no rush`, `whenever`, `sem pressa`, `quando puder`.\n\n5.  **`due_date` (string | null):**\n    * **Action:** Extract any date or time information from the message and convert it to a full ISO 8601 timestamp string: `YYYY-MM-DDTHH:MM:SSZ`. Use the `message_timestamp` as your reference.\n\n## Guiding Principles\n\n* **Be a Helper:** The generated guide should be genuinely useful and practical.\n* **Context is Key:** All generated content (titles, guides) must be in the same language as the source message.\n* **Strict Format:** Your entire output must be only the JSON object, without any surrounding text or explanations.\n\n## Example (English Message)\n\n**Assumed Inputs:**\n* `message_content`: \"Can you urgently prepare the presentation slides for 10am tomorrow\"\n* `user_id`: \"usr_abc123\"\n* `sender_details`: \"+15551234567\"\n* `message_timestamp`: \"2025-08-21T18:00:00Z\"\n\n**Expected JSON Output:**\n```json\n{\n  \"title\": \"Prepare the presentation slides\",\n  \"user_id\": \"usr_abc123\",\n  \"description\": \"Can you urgently prepare the presentation slides for 10am tomorrow\\nTask received via WhatsApp from: +15551234567\\n\\n---\\n\\n‚ú® AI-Generated Guide\\n\\nüìù Step-by-Step Suggestions:\\n1. Define the core objective and target audience for the presentation.\\n2. Outline the key talking points and structure the content flow (Intro, Body, Conclusion).\\n3. Design the slides using a clean template, focusing on strong visuals and concise text.\\n4. Rehearse the presentation to check for timing, clarity, and impact.\\n\\nüîó Helpful Resources:\\n* [Google Slides Essential Training](https://www.linkedin.com/learning/google-slides-essential-training)\\n* [TED's Secret to Great Public Speaking (YouTube)](https://www.youtube.com/watch?v=i68a6M5FFBc)\\n* [Canva's Guide to Creating Great Presentations](https://www.canva.com/designschool/tutorials/presentations/)\",\n  \"priority\": 1,\n  \"due_date\": \"2025-08-22T10:00:00Z\"\n}\n\n## Your Turn: Process the Following\n\nNow, process this input, which contains all the necessary context:\n\n{{ $json.toJsonString() }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        224,
        352
      ],
      "id": "06df2867-9bcc-48a0-a315-c4987dd48a67",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        160,
        544
      ],
      "id": "325eed46-a1c6-4104-8dc2-44a8cf501c49",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "FlTdhmLvwN12SCI7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "auth",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "3e1717a9-0d3c-4e3b-a8e0-ab5c10673ead"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "auth"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7ae6d7a3-056a-4454-816d-231d83423255",
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "message",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "message"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -32,
        208
      ],
      "id": "15dcccd7-8edb-47c3-9c4f-8272a18ed53d",
      "name": "Switch"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://choma-web-app.vercel.app/api/phone-status",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Key",
              "value": "3210306d0780926b1349d3552383899dc50bc6aff68e3d8c26305bf06585373011"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "senderPhoneNumber",
              "value": "={{ $json.body.data.key.remoteJid.split(\"@\")[0] }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -448,
        208
      ],
      "id": "16d92538-41f6-4932-9851-e13ec20607f3",
      "name": "Check if phone number is linked"
    },
    {
      "parameters": {
        "jsCode": "const now = new Date()\nconst message = $('Webhook').first().json.body.data.message.conversation ?? \"\"\nconst senderPhoneNumber = $input.first().json.phone_number ?? \"\"\nconst linked = $input.first().json.is_linked ?? false\n\nif (message.includes(\"#auth\") && !linked) {\n  return [{\n    date: now,\n    type: \"auth\",\n    message: message.split(\" \")[1], \n    senderPhoneNumber, \n  }]\n}\n\nif (message.includes(\"#todo\") && linked) {\n  return [{\n    date: now,\n    type: \"message\",\n    message, \n    senderPhoneNumber, \n  }]\n}\n\nreturn [{}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -240,
        208
      ],
      "id": "d669bd9d-5f4a-4668-91d4-7e46e849f941",
      "name": "Verify message type"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://choma-web-app.vercel.app/api/webhook/evolution-api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Key",
              "value": "3210306d0780926b1349d3552383899dc50bc6aff68e3d8c26305bf06585373011"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.toJsonString() }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        224,
        96
      ],
      "id": "1fded3df-cf8c-45d0-b7b2-bc9af6d43dd9",
      "name": "Link phone with auth code"
    },
    {
      "parameters": {
        "jsCode": "const itemJson = $input.first().json;\n\nconst nestedString = itemJson.output;\n\nconst cleanJsonString = nestedString.replace(/^```json\\s*|\\s*```$/g, '').trim();\n\nconst finalObject = JSON.parse(cleanJsonString);\n\nreturn [{\n  json: {\n    task: finalObject\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        528,
        352
      ],
      "id": "98c892d6-37d6-406e-b316-710179b0d48a",
      "name": "Parse to json object"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://choma-web-app.vercel.app/api/todos",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Key",
              "value": "3210306d0780926b1349d3552383899dc50bc6aff68e3d8c26305bf06585373011"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.task.toJsonString() }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        720,
        352
      ],
      "id": "587ef267-4539-4415-a6ff-05037088c908",
      "name": "Create todo"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://evolution-api:8080/message/sendText/{{ $('Webhook').item.json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apiKey",
              "value": "d5c7e5ec2decf03fffddfe6c92ce9700b67e868358ee7abc7ff9b88e9f245a0c"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{$json.phone_number}}\",\n  \"text\": \"Welcome to Choma Tasks! Your WhatsApp account has been successfully linked.\\n\\nYou're all set to start organizing your tasks. Just send a message to this chat starting with #todo.\\n\\nTry it out: #todo Add my first task to Choma Tasks tomorrow at 9am\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        432,
        96
      ],
      "id": "358ba12e-540a-4b2c-b7d6-c27775a264cd",
      "name": "Send auth confirmation message"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://evolution-api:8080/message/sendText/{{ $('Webhook').item.json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apiKey",
              "value": "d5c7e5ec2decf03fffddfe6c92ce9700b67e868358ee7abc7ff9b88e9f245a0c"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ $('Webhook').item.json.body.data.key.remoteJid.split(\"@\")[0] }}\",\n  \"text\": \"Task created successfully ‚úÖ\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        912,
        352
      ],
      "id": "a1bfd28a-2753-48c9-9911-5e1617e62c94",
      "name": "Send taks creation confirmation message"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Check if phone number is linked",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Parse to json object",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Link phone with auth code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if phone number is linked": {
      "main": [
        [
          {
            "node": "Verify message type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify message type": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Link phone with auth code": {
      "main": [
        [
          {
            "node": "Send auth confirmation message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse to json object": {
      "main": [
        [
          {
            "node": "Create todo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create todo": {
      "main": [
        [
          {
            "node": "Send taks creation confirmation message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f9aa2d58a9f4e2c1ce52965e310eae8aea18b8c2afea779f7cdcc6a2a2138287"
  }
}